root@C.8317504:~$ java --version
java 21.0.2 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 21.0.2+13-LTS-58)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.2+13-LTS-58, mixed mode, sharing)

//-------------------------------------
//-------------------------------------
Commit: f8af0a0
 
// DEFAULT DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      2.771 s ±  0.022 s    [User: 19.291 s, System: 0.642 s]
  Range (min … max):    2.740 s …  2.819 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      1.164 s ±  0.049 s    [User: 39.236 s, System: 1.061 s]
  Range (min … max):    1.075 s …  1.211 s    10 runs

// 10K DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      5.098 s ±  0.029 s    [User: 35.623 s, System: 0.873 s]
  Range (min … max):    5.057 s …  5.147 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      2.111 s ±  0.064 s    [User: 80.608 s, System: 1.519 s]
  Range (min … max):    2.003 s …  2.238 s    10 runs

//-------------------------------------
//-------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      2.804 s ±  0.062 s    [User: 19.289 s, System: 0.654 s]
  Range (min … max):    2.750 s …  2.958 s    10 runs

root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      1.180 s ±  0.073 s    [User: 38.504 s, System: 1.009 s]
  Range (min … max):    1.076 s …  1.275 s    10 runs

// 10K DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      5.111 s ±  0.044 s    [User: 35.609 s, System: 0.830 s]
  Range (min … max):    5.033 s …  5.160 s    10 runs

root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      2.094 s ±  0.052 s    [User: 79.624 s, System: 1.491 s]
  Range (min … max):    2.040 s …  2.192 s    10 runs

##########################################
##########################################    USING GRAAL VM
##########################################
root@C.8320440:~/1brc$ ./prepare_thomaswue.sh 

Using java version 21.0.1-graal in this shell.
========================================================================================================================
GraalVM Native Image: Generating 'CalculateAverage_thomaswue_image' (executable)...
========================================================================================================================
[1/8] Initializing...                                                                                    (3.6s @ 0.35GB)
 Java version: 21.0.1+12, vendor version: Oracle GraalVM 21.0.1+12.1
 Graal compiler: optimization level: 3, target machine: native, PGO: ML-inferred
 C compiler: gcc (linux, x86_64, 9.4.0)
 Garbage collector: Epsilon GC (max heap size: 80% of RAM)
 1 user-specific feature(s):
 - com.oracle.svm.thirdparty.gson.GsonFeature
------------------------------------------------------------------------------------------------------------------------
Build resources:
 - 26.49GB of memory (11.0% of 241.49GB system memory, determined at start)
 - 32 thread(s) (51.6% of 62 available processor(s), determined at start)
[2/8] Performing analysis...  [****]                                                                     (3.5s @ 0.82GB)
    2,215 reachable types   (62.1% of    3,568 total)
    2,070 reachable fields  (45.2% of    4,579 total)
    9,880 reachable methods (37.5% of   26,327 total)
      779 types,   112 fields, and   439 methods registered for reflection
       49 types,    32 fields, and    48 methods registered for JNI access
       0 foreign downcalls registered
        4 native libraries: dl, pthread, rt, z
[3/8] Building universe...                                                                               (0.8s @ 0.31GB)
[4/8] Parsing methods...      [*]                                                                        (1.1s @ 0.59GB)
[5/8] Inlining methods...     [***]                                                                      (0.4s @ 0.26GB)
[6/8] Compiling methods...    [***]                                                                      (7.5s @ 0.45GB)
[7/8] Layouting methods...    [*]                                                                        (1.0s @ 0.56GB)
[8/8] Creating image...       [*]                                                                        (0.9s @ 0.63GB)
   4.55MB (51.99%) for code area:     4,239 compilation units
   3.75MB (42.91%) for image heap:   58,643 objects and 43 resources
 457.24kB ( 5.10%) for other data
   8.75MB in total
------------------------------------------------------------------------------------------------------------------------
Top 10 origins of code area:                                Top 10 object types in image heap:
   2.81MB java.base                                            1.19MB byte[] for code metadata
   1.23MB svm.jar (Native Image)                             735.09kB byte[] for java.lang.String
 238.15kB com.oracle.svm.svm_enterprise                      388.52kB java.lang.String
  49.35kB org.graalvm.nativeimage.base                       352.29kB java.lang.Class
  42.27kB jdk.proxy3                                         167.28kB java.util.HashMap$Node
  40.30kB jdk.proxy1                                         114.01kB char[]
  39.40kB org.graalvm.collections                            102.01kB byte[] for reflection metadata
  27.54kB jdk.internal.vm.ci                                  91.65kB java.lang.Object[]
  22.25kB jdk.internal.vm.compiler                            86.52kB com.oracle.svm.core.hub.DynamicHubCompanion
  17.80kB average-1.0.0-SNAPSHOT.jar                          72.44kB java.util.HashMap$Node[]
  11.67kB for 2 more packages                                520.73kB for 548 more object types
                              Use '-H:+BuildReport' to create a report with more details.
------------------------------------------------------------------------------------------------------------------------
Security report:
 - Binary does not include Java deserialization.
 - Use '--enable-sbom' to embed a Software Bill of Materials (SBOM) in the binary.
------------------------------------------------------------------------------------------------------------------------
Recommendations:
 PGO:  Use Profile-Guided Optimizations ('--pgo') for improved throughput.
 INIT: Adopt '--strict-image-heap' to prepare for the next GraalVM release.
 HEAP: Set max heap for improved and more predictable memory usage.
 QBM:  Use the quick build mode ('-Ob') to speed up builds during development.
------------------------------------------------------------------------------------------------------------------------
                        1.0s (5.2% of total time) in 40 GCs | Peak RSS: 1.83GB | CPU load: 20.54
------------------------------------------------------------------------------------------------------------------------
Produced artifacts:
 /root/1brc/target/CalculateAverage_thomaswue_image (executable)
========================================================================================================================
Finished generating 'CalculateAverage_thomaswue_image' in 19.4s.

//----------------------------------------
//----------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      2.279 s ±  0.021 s    [User: 15.841 s, System: 0.604 s]
  Range (min … max):    2.257 s …  2.326 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):     666.4 ms ±   8.2 ms    [User: 23390.8 ms, System: 1474.0 ms]
  Range (min … max):   658.6 ms … 679.6 ms    10 runs

// 10K DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      4.193 s ±  0.022 s    [User: 30.086 s, System: 0.799 s]
  Range (min … max):    4.168 s …  4.251 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_thomaswue.sh 2>&1"
Benchmark 1: ./calculate_average_thomaswue.sh 2>&1
  Time (mean ± σ):      1.480 s ±  0.012 s    [User: 51.035 s, System: 1.731 s]
  Range (min … max):    1.460 s …  1.493 s    10 runs