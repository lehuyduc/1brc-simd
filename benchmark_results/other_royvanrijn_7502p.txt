SEE GRAALVM RESULT AT THE END

root@C.8317504:~$ java --version
java 21.0.2 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 21.0.2+13-LTS-58)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.2+13-LTS-58, mixed mode, sharing)

//-------------------------------------
//-------------------------------------
Commit: ef24d4e

// DEFAULT DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      2.818 s ±  0.182 s    [User: 19.163 s, System: 0.663 s]
  Range (min … max):    2.631 s …  3.101 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      1.207 s ±  0.052 s    [User: 39.918 s, System: 1.254 s]
  Range (min … max):    1.140 s …  1.301 s    10 runs

// 10K DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      5.100 s ±  0.079 s    [User: 36.072 s, System: 0.954 s]
  Range (min … max):    4.999 s …  5.256 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      1.765 s ±  0.050 s    [User: 70.293 s, System: 1.821 s]
  Range (min … max):    1.700 s …  1.859 s    10 runs


//-------------------------------------
//-------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      2.998 s ±  0.207 s    [User: 20.690 s, System: 0.659 s]
  Range (min … max):    2.824 s …  3.355 s    10 runs

root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      1.354 s ±  0.058 s    [User: 46.400 s, System: 1.090 s]
  Range (min … max):    1.258 s …  1.450 s    10 runs

// 10K DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      5.596 s ±  0.129 s    [User: 39.503 s, System: 0.905 s]
  Range (min … max):    5.397 s …  5.884 s    10 runs

root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      1.908 s ±  0.041 s    [User: 71.411 s, System: 1.642 s]
  Range (min … max):    1.854 s …  1.990 s    10 runs

##########################################
##########################################    USING GRAAL VM
##########################################
root@C.8320440:~/1brc$ ./prepare_royvanrijn.sh 

Using java version 21.0.1-graal in this shell.
========================================================================================================================
GraalVM Native Image: Generating 'CalculateAverage_royvanrijn_image' (executable)...
========================================================================================================================
[1/8] Initializing...                                                                                    (3.6s @ 0.36GB)
 Java version: 21.0.1+12, vendor version: Oracle GraalVM 21.0.1+12.1
 Graal compiler: optimization level: 3, target machine: native, PGO: ML-inferred
 C compiler: gcc (linux, x86_64, 9.4.0)
 Garbage collector: Epsilon GC (max heap size: 80% of RAM)
 1 user-specific feature(s):
 - com.oracle.svm.thirdparty.gson.GsonFeature
------------------------------------------------------------------------------------------------------------------------
Build resources:
 - 26.49GB of memory (11.0% of 241.49GB system memory, determined at start)
 - 32 thread(s) (51.6% of 62 available processor(s), determined at start)
[2/8] Performing analysis...  [****]                                                                     (3.3s @ 0.82GB)
    2,255 reachable types   (62.6% of    3,602 total)
    2,125 reachable fields  (45.8% of    4,643 total)
   10,100 reachable methods (38.1% of   26,510 total)
      795 types,   112 fields, and   442 methods registered for reflection
       49 types,    32 fields, and    48 methods registered for JNI access
       0 foreign downcalls registered
        4 native libraries: dl, pthread, rt, z
[3/8] Building universe...                                                                               (0.8s @ 0.30GB)
[4/8] Parsing methods...      [*]                                                                        (1.2s @ 0.64GB)
[5/8] Inlining methods...     [***]                                                                      (0.2s @ 0.83GB)
[6/8] Compiling methods...    [***]                                                                      (8.0s @ 0.71GB)
[7/8] Layouting methods...    [*]                                                                        (1.1s @ 0.83GB)
[8/8] Creating image...       [*]                                                                        (0.9s @ 0.35GB)
   4.66MB (52.17%) for code area:     4,361 compilation units
   3.82MB (42.69%) for image heap:   59,120 objects and 43 resources
 470.38kB ( 5.14%) for other data
   8.94MB in total
------------------------------------------------------------------------------------------------------------------------
Top 10 origins of code area:                                Top 10 object types in image heap:
   2.92MB java.base                                            1.22MB byte[] for code metadata
   1.23MB svm.jar (Native Image)                             746.62kB byte[] for java.lang.String
 238.15kB com.oracle.svm.svm_enterprise                      392.39kB java.lang.String
  49.42kB org.graalvm.nativeimage.base                       360.81kB java.lang.Class
  42.27kB jdk.proxy3                                         167.09kB java.util.HashMap$Node
  40.30kB jdk.proxy1                                         114.01kB char[]
  39.42kB org.graalvm.collections                            103.88kB byte[] for reflection metadata
  27.54kB jdk.internal.vm.ci                                  91.63kB java.lang.Object[]
  27.35kB average-1.0.0-SNAPSHOT.jar                          88.09kB com.oracle.svm.core.hub.DynamicHubCompanion
  22.45kB jdk.internal.vm.compiler                            72.44kB java.util.HashMap$Node[]
  11.67kB for 2 more packages                                522.74kB for 553 more object types
                              Use '-H:+BuildReport' to create a report with more details.
------------------------------------------------------------------------------------------------------------------------
Security report:
 - Binary does not include Java deserialization.
 - Use '--enable-sbom' to embed a Software Bill of Materials (SBOM) in the binary.
------------------------------------------------------------------------------------------------------------------------
Recommendations:
 PGO:  Use Profile-Guided Optimizations ('--pgo') for improved throughput.
 HEAP: Set max heap for improved and more predictable memory usage.
 QBM:  Use the quick build mode ('-Ob') to speed up builds during development.
------------------------------------------------------------------------------------------------------------------------
                        1.0s (5.1% of total time) in 42 GCs | Peak RSS: 1.85GB | CPU load: 21.26
------------------------------------------------------------------------------------------------------------------------
Produced artifacts:
 /root/1brc/target/CalculateAverage_royvanrijn_image (executable)
========================================================================================================================
Finished generating 'CalculateAverage_royvanrijn_image' in 19.7s.

//----------------------------------------
//----------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      3.010 s ±  0.018 s    [User: 21.615 s, System: 0.606 s]
  Range (min … max):    2.993 s …  3.044 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):     881.9 ms ±   5.8 ms    [User: 32003.5 ms, System: 1614.4 ms]
  Range (min … max):   874.6 ms … 893.7 ms    10 runs

// 10K DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      4.898 s ±  0.017 s    [User: 35.424 s, System: 0.890 s]
  Range (min … max):    4.876 s …  4.928 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_royvanrijn.sh 2>&1"
Benchmark 1: ./calculate_average_royvanrijn.sh 2>&1
  Time (mean ± σ):      1.564 s ±  0.014 s    [User: 55.682 s, System: 3.190 s]
  Range (min … max):    1.535 s …  1.584 s    10 runs