SEE GRAALVM RESULT AT THE END

root@C.8317504:~$ java --version
java 21.0.2 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 21.0.2+13-LTS-58)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.2+13-LTS-58, mixed mode, sharing)

//-------------------------------------
//-------------------------------------
Commit: 186eae1

// DEFAULT DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      2.483 s ±  0.070 s    [User: 16.733 s, System: 0.675 s]
  Range (min … max):    2.427 s …  2.675 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):     891.0 ms ±  21.1 ms    [User: 27681.6 ms, System: 1791.5 ms]
  Range (min … max):   865.9 ms … 924.1 ms    10 runs

// 10K DATASET
root@C.8317504:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      4.152 s ±  0.046 s    [User: 28.842 s, System: 0.909 s]
  Range (min … max):    4.034 s …  4.197 s    10 runs

root@C.8317504:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      1.345 s ±  0.021 s    [User: 44.592 s, System: 2.112 s]
  Range (min … max):    1.293 s …  1.369 s    10 runs


//-------------------------------------
//-------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      2.488 s ±  0.078 s    [User: 16.670 s, System: 0.716 s]
  Range (min … max):    2.413 s …  2.692 s    10 runs

root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):     894.6 ms ±  39.3 ms    [User: 27557.7 ms, System: 1743.1 ms]
  Range (min … max):   858.3 ms … 969.0 ms    10 runs

// 10K DATASET
root@C.8319534:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      4.168 s ±  0.062 s    [User: 28.765 s, System: 0.870 s]
  Range (min … max):    4.109 s …  4.332 s    10 runs
 
root@C.8319534:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      1.351 s ±  0.015 s    [User: 44.997 s, System: 2.053 s]
  Range (min … max):    1.326 s …  1.371 s    10 runs


##########################################
##########################################    USING GRAAL VM
##########################################
root@C.8320440:~/1brc$ ./prepare_artsiomkorzun.sh 

Using java version 21.0.1-graal in this shell.
========================================================================================================================
GraalVM Native Image: Generating 'CalculateAverage_artsiomkorzun_image' (executable)...
========================================================================================================================
[1/8] Initializing...                                                                                    (3.7s @ 0.38GB)
 Java version: 21.0.1+12, vendor version: Oracle GraalVM 21.0.1+12.1
 Graal compiler: optimization level: 3, target machine: native, PGO: ML-inferred
 C compiler: gcc (linux, x86_64, 9.4.0)
 Garbage collector: Epsilon GC (max heap size: 64.00MB)
 1 user-specific feature(s):
 - com.oracle.svm.thirdparty.gson.GsonFeature
------------------------------------------------------------------------------------------------------------------------
Build resources:
 - 26.49GB of memory (11.0% of 241.49GB system memory, determined at start)
 - 32 thread(s) (51.6% of 62 available processor(s), determined at start)
[2/8] Performing analysis...  [****]                                                                     (3.2s @ 0.76GB)
    2,193 reachable types   (61.7% of    3,555 total)
    2,056 reachable fields  (45.2% of    4,544 total)
    9,885 reachable methods (37.8% of   26,176 total)
      769 types,   116 fields, and   441 methods registered for reflection
       49 types,    32 fields, and    48 methods registered for JNI access
       0 foreign downcalls registered
        4 native libraries: dl, pthread, rt, z
[3/8] Building universe...                                                                               (0.8s @ 0.26GB)
[4/8] Parsing methods...      [*]                                                                        (1.2s @ 0.54GB)
[5/8] Inlining methods...     [***]                                                                      (0.2s @ 0.72GB)
[6/8] Compiling methods...    [***]                                                                      (8.0s @ 0.83GB)
[7/8] Layouting methods...    [*]                                                                        (1.1s @ 0.38GB)
[8/8] Creating image...       [*]                                                                        (0.9s @ 0.45GB)
   4.57MB (52.12%) for code area:     4,225 compilation units
   3.76MB (42.86%) for image heap:   58,769 objects and 43 resources
 450.44kB ( 5.02%) for other data
   8.77MB in total
------------------------------------------------------------------------------------------------------------------------
Top 10 origins of code area:                                Top 10 object types in image heap:
   2.81MB java.base                                            1.19MB byte[] for code metadata
   1.23MB svm.jar (Native Image)                             731.72kB byte[] for java.lang.String
 236.32kB com.oracle.svm.svm_enterprise                      387.19kB java.lang.String
  49.35kB org.graalvm.nativeimage.base                       348.48kB java.lang.Class
  42.27kB jdk.proxy3                                         167.03kB java.util.HashMap$Node
  40.30kB jdk.proxy1                                         114.01kB char[]
  39.40kB org.graalvm.collections                            102.03kB byte[] for reflection metadata
  37.09kB average-1.0.0-SNAPSHOT.jar                          92.41kB java.lang.Object[]
  27.54kB jdk.internal.vm.ci                                  85.66kB com.oracle.svm.core.hub.DynamicHubCompanion
  22.25kB jdk.internal.vm.compiler                            72.44kB java.util.HashMap$Node[]
  11.67kB for 2 more packages                                531.30kB for 541 more object types
                              Use '-H:+BuildReport' to create a report with more details.
------------------------------------------------------------------------------------------------------------------------
Security report:
 - Binary does not include Java deserialization.
 - Use '--enable-sbom' to embed a Software Bill of Materials (SBOM) in the binary.
------------------------------------------------------------------------------------------------------------------------
Recommendations:
 PGO:  Use Profile-Guided Optimizations ('--pgo') for improved throughput.
 INIT: Adopt '--strict-image-heap' to prepare for the next GraalVM release.
 QBM:  Use the quick build mode ('-Ob') to speed up builds during development.
------------------------------------------------------------------------------------------------------------------------
                        0.9s (4.7% of total time) in 41 GCs | Peak RSS: 1.85GB | CPU load: 21.09
------------------------------------------------------------------------------------------------------------------------
Produced artifacts:
 /root/1brc/target/CalculateAverage_artsiomkorzun_image (executable)
========================================================================================================================
Finished generating 'CalculateAverage_artsiomkorzun_image' in 19.7s.

//----------------------------------------
//----------------------------------------
Commit: 673c1b9

// DEFAULT DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      2.106 s ±  0.009 s    [User: 14.187 s, System: 0.687 s]
  Range (min … max):    2.083 s …  2.112 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):     695.7 ms ±   3.4 ms    [User: 21333.2 ms, System: 2303.3 ms]
  Range (min … max):   689.2 ms … 701.7 ms    10 runs

// 10K DATASET
root@C.8320440:~/1brc$ numactl --physcpubind=0-7 hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      2.674 s ±  0.008 s    [User: 18.196 s, System: 0.862 s]
  Range (min … max):    2.663 s …  2.690 s    10 runs

root@C.8320440:~/1brc$ hyperfine --warmup 1 --runs 10 "./calculate_average_artsiomkorzun.sh 2>&1"
Benchmark 1: ./calculate_average_artsiomkorzun.sh 2>&1
  Time (mean ± σ):      1.037 s ±  0.012 s    [User: 38.503 s, System: 2.567 s]
  Range (min … max):    1.016 s …  1.055 s    10 runs